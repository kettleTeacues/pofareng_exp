"""first revision

Revision ID: 4394ddba2720
Revises: 
Create Date: 2024-04-09 16:07:08.588283

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

import os
from dotenv import load_dotenv
load_dotenv()

# revision identifiers, used by Alembic.
revision: str = '4394ddba2720'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('hello',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('timezone', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('email', sa.String(length=254), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('password', sa.String(length=128), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('user_id', sa.String(length=10), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('group',
    sa.Column('group_name', sa.String(length=254), nullable=False),
    sa.Column('owner_id', sa.String(length=10), nullable=False),
    sa.Column('group_id', sa.String(length=10), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('group_id'),
    sa.UniqueConstraint('group_name')
    )
    op.create_table('log_color',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event', sa.String(length=100), nullable=False),
    sa.Column('color_name', sa.String(length=7), nullable=False),
    sa.Column('color_code', sa.String(length=30), nullable=False),
    sa.Column('created_by_id', sa.String(length=10), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('created_by_id', 'event', name='uix_1')
    )
    op.create_table('group_entity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.String(length=10), nullable=False),
    sa.Column('entity_id', sa.String(length=32), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.group_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group_user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.String(length=10), nullable=False),
    sa.Column('user_id', sa.String(length=10), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.group_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lifelog',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('event', sa.String(length=100), nullable=False),
    sa.Column('start_datetime', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_datetime', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by_id', sa.String(length=10), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by_id', sa.String(length=10), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('group_id', sa.String(length=10), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.user_id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['group.group_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('log_memo',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('memo', sa.String(length=500), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by_id', sa.String(length=10), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by_id', sa.String(length=10), nullable=False),
    sa.Column('log_id', sa.String(length=32), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.user_id'], ),
    sa.ForeignKeyConstraint(['log_id'], ['lifelog.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    # Insert test records for user, group, and group_user tables
    op.execute(f"""
    INSERT INTO {os.getenv('POSTGRES_SCHEMA_NAME')}.user (email, username, password, is_admin, is_active, user_id) VALUES ('test@example.com', 'test_user', 'password', true, true, 'user123456');
    INSERT INTO {os.getenv('POSTGRES_SCHEMA_NAME')}.group (group_id, group_name, owner_id) VALUES ('group12345', 'test_group', 'user123456');
    INSERT INTO {os.getenv('POSTGRES_SCHEMA_NAME')}.group_user (id, group_id, user_id) VALUES (1, 'group12345', 'user123456');
    """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('log_memo')
    op.drop_table('lifelog')
    op.drop_table('group_user')
    op.drop_table('group_entity')
    op.drop_table('log_color')
    op.drop_table('group')
    op.drop_table('user')
    op.drop_table('hello')
    # ### end Alembic commands ###
